###############################################################################
#
# IAR C/C++ Compiler V2.10.4.157 for STM8                 28/Dec/2016  17:36:59
# Copyright 2010-2015 IAR Systems AB.
#
#    Source file  =  E:\Github Project\STM8L151K4T6_Oil_Can_Drone\APP\main.c
#    Command line =  
#        "E:\Github Project\STM8L151K4T6_Oil_Can_Drone\APP\main.c" -e -Ol
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_cross_call --debug --code_model medium --data_model medium -o
#        "E:\Github Project\STM8L151K4T6_Oil_Can_Drone\Debug\Obj\"
#        --dlib_config "E:\My Program\IAR_STM8-7.0\stm8\LIB\dlstm8mmf.h" -D
#        STM8L15X_MD -lcN "E:\Github
#        Project\STM8L151K4T6_Oil_Can_Drone\Debug\List\" -I "E:\Github
#        Project\STM8L151K4T6_Oil_Can_Drone\" -I "E:\Github
#        Project\STM8L151K4T6_Oil_Can_Drone\STM8L15x_StdPeriph_Driver\inc\" -I
#        "E:\Github Project\STM8L151K4T6_Oil_Can_Drone\APP\" -I "E:\Github
#        Project\STM8L151K4T6_Oil_Can_Drone\BSP\" --vregs 16
#    List file    =  
#        E:\Github Project\STM8L151K4T6_Oil_Can_Drone\Debug\List\main.lst
#    Object file  =  
#        E:\Github Project\STM8L151K4T6_Oil_Can_Drone\Debug\Obj\main.o
#
###############################################################################

E:\Github Project\STM8L151K4T6_Oil_Can_Drone\APP\main.c
      1          #include "stdio.h" 
      2          #include "string.h" 
      3          #include "bsp.h" 
      4          #include "CC1101.h"
      5          
      6          // USART_CSB
      7          #define Dis_Len 2
      8          volatile u8 Distance[Dis_Len] = {0, 0};
      9          volatile u8 Dis_Index = 0;
     10          volatile u8 distance = 0; 
     11          
     12          // CC1101
     13          volatile u16  Cnt1ms = 0;     // 1ms计数变量，每1ms加一 
     14          int  RecvWaitTime = 0;        // 接收等待时间                
     15          u16  SendCnt = 0;             // 计数发送的数据包数                
     16          
     17                                     // 帧头  源地址  目标地址  distance*10  帧尾
     18          u8 SendBuffer[SEND_LENGTH] = {0x55,   0,    0xff,     15,          0xaa}; // 从机待发送数据
     19                                     // 帧头  源地址  目标地址  帧尾
     20          u8 AckBuffer[ACK_LENGTH]   = {0x55,  0xff,     0,     0xaa};        // 主机应答数据
     21                       
     22          void System_Initial(void);                     // 系统初始化
     23          u8   RF_SendPacket(u8 *Sendbuffer, u8 length);  // 从机发送数据包
     24          void Get_TheTime(void);
     25          void RTC_AWU_Initial(uint16_t time);            // time * 26.95 ms 
     26          void DelayMs(u16 x);                            // TIM3延时函数
     27          u8   Measured_Range(void);                      // 超声波测距
     28          
     29          // printf支持
     30          int putchar(int c)   
     31          {  
     32              while(!USART_GetFlagStatus(USART1, USART_FLAG_TXE));//等待发送完毕
     33              USART_SendData8(USART1, (uint8_t)c);
     34              return (c);  
     35          }
     36          
     37          void main(void)
     38          {
     39              u8 SendError_Time = 0;                             // 连续发送出错次数
     40              volatile u8 res = 0;
     41              volatile u8 Timer_30s = 6;                        // 上电发送
     42              float ADC_Value = 0.0f;
     43                 
     44              System_Initial();                                 // 初始化系统所有外设               
     45              CC1101Init();                                     // 初始化CC1101为发送模式 
     46              SendBuffer[1] = TX_Address;                       // 数据包源地址（从机地址）
     47              
     48              while(1)
     49              {
     50                  printf("Timer_30s=%d\r\n", (int)Timer_30s);  
     51                  if(Timer_30s++ == 6)                   // 约 3 Min     30s * 6
     52                  {
     53                      SWITCH_ON();                       // 接通CC1101、CSB电源
     54                      LED_ON();                          // LED闪烁，用于指示发送成功
     55                      CSB_Initial();                     // 初始化超声波模块
     56                      CC1101Init();                      // 初始化CC1101模块
     57                      SendError_Time = 0;                // 出错次数清零
     58                        
     59                      distance = Measured_Range();       // 超声波测距 
     60                      if(distance)  
     61                      {
     62                          SendBuffer[3] = distance;
     63                          printf("distance = %d cm\r\n", distance);
     64                      }
     65                      else 
     66                      {
     67                          SendBuffer[3] = 0;             // 测量出错  发送0
     68                          printf("Measured_Error\r\n");
     69                      } 
     70          send:            
     71                      res = RF_SendPacket(SendBuffer, SEND_LENGTH);
     72                      if(res != 0) 
     73                      {
     74                          printf("Send ERROR:%d\r\n", (int)res);  // 发送失败
     75                          DelayMs(25);
     76                          if(++SendError_Time < 20) goto send;   //  出错次数达到20次，则放弃此次传输
     77                          printf("Send Canceled!\r\n");  // 发送失败
     78                      }
     79                      else printf("Send OK!\r\n");              // 发送成功
     80                      
     81                      SWITCH_OFF();
     82                      LED_OFF();
     83                      Timer_30s = 1;
     84                  }
     85                  RTC_AWU_Initial(1116);     // RTC 唤醒中断    1116 * 26.95 ms = 30s
     86                  halt();//挂起，最低功耗
     87              }
     88          }
     89          
     90          /*===========================================================================
     91          * 函数 : DelayMs() => 延时函数(ms级)                                        *
     92          * 输入 ：x, 需要延时多少(0-65535)                                             *
     93          ============================================================================*/
     94          void DelayMs(u16 x)
     95          {
     96              u16 timer_ms = x;
     97              
     98              Cnt1ms = 0;
     99              TIM3_Set(1);
    100              while(Cnt1ms < timer_ms);
    101              TIM3_Set(0);
    102          }
    103          
    104          /*===========================================================================
    105          * 函数 ：TIM3_1MS_ISR() => 定时器3服务函数, 定时时间基准为1ms               *
    106          ============================================================================*/
    107          void TIM3_1MS_ISR(void)
    108          {
    109              Cnt1ms++;
    110              if(RecvWaitTime > 0) RecvWaitTime--;    // 数据接收计时
    111          }
    112          
    113          /*===========================================================================
    114          * 函数: System_Initial() => 初始化系统所有外设                              *
    115          ============================================================================*/
    116          void System_Initial(void)
    117          {
    118              SClK_Initial();         // 初始化系统时钟，16M / 4 = 4M    
    119              GPIO_Initial();         // 初始化GPIO   LED  SWITCH
    120           
    121              CSB_Initial();          // 初始化超声波模块
    122              USART1_Initial();       // 初始化串口1  超声波模块使用 
    123              TIM3_Initial();         // 初始化定时器3，基准1ms  
    124              SPI_Initial();          // 初始化SPI  
    125              ADC_Initial();          // 初始化ADC
    126              
    127              //RTC_Initial();            // 初始化RTC   LSI
    128              //RTC_AWU_Initial(186);     // RTC 唤醒中断    186 * 26.95 ms = 5s
    129              enableInterrupts();     // 使能系统总中断
    130              
    131              printf("Oil_Can_Drone\r\n");                      // 发送字符串，末尾换行
    132          }
    133          
    134          /*===========================================================================
    135          * 函数 : BSP_RF_SendPacket() => 无线发送数据函数                            *
    136          * 输入 ：Sendbuffer指向待发送的数据，length发送数据长度                      *
    137          * 输出 ：0，发送成功                                                      
    138                   1，等待应答超时
    139                   2，数据包长度错误
    140                   3，数据包帧头错误
    141                   4，数据包源地址错误
    142                   5，数据包目标地址错误
    143                   6，数据包帧尾
    144                   7，应答信号错误
    145          ============================================================================*/
    146          INT8U RF_SendPacket(INT8U *Sendbuffer, INT8U length)
    147          {
    148              uint8_t  i = 0, ack_len = 0, ack_buffer[10] = {0};
    149              RecvWaitTime = (int)RECV_TIMEOUT;           // 等待应答超时限制1500ms
    150              
    151              CC1101SendPacket(SendBuffer, length, ADDRESS_CHECK);    // 发送数据 
    152              CC1101SetTRMode(RX_MODE);                               // 准备接收应答
    153          
    154              TIM3_Set(1);                                // 开启TIM3
    155              //printf("waiting for ack...\r\n");
    156              while(CC_IRQ_READ() != 0)                   // 等待接收数据包
    157              {
    158                  if(RecvWaitTime <= 0)      
    159                  {  
    160                      TIM3_Set(0);                            // 关闭TIM3
    161                      return 1;                              // 等待应答超时
    162                  }
    163              }
    164              RecvWaitTime = 50;           // 等待应答超时限制50ms
    165              while(CC_IRQ_READ() == 0)
    166              {
    167                  if(RecvWaitTime <= 0)      
    168                  {  
    169                      TIM3_Set(0);                            // 关闭TIM3
    170                      return 7;                              // 等待应答超时
    171                  }
    172              }
    173          //    printf("RecvWaitTime2=%d\r\n", RecvWaitTime);
    174              TIM3_Set(0);                                // 关闭TIM3
    175              ack_len = CC1101RecPacket(ack_buffer);      // 读取收到的数据
    176              
    177              if(ack_len <= 0 || ack_len > 10)  
    178              {
    179                  CC1101Init(); 
    180                  //printf("ack_len1=%d\r\n", ack_len);
    181                  return 2;                                          // 数据包长度错误
    182              }
    183              if(ack_len != ACK_LENGTH) return 2;                    // 数据包长度错误
    184              if(ack_buffer[0] != 0x55) return 3;                    // 数据包帧头错误
    185              if(ack_buffer[1] != 0xff) return 4;                    // 数据包源地址错误       
    186              if(ack_buffer[2] == 0xff) return 5;                    // 数据包目标地址错误
    187              if(ack_buffer[3] != 0xaa) return 6;            // 数据包帧尾
    188          
    189              // 应答正确
    190              printf("ack_len=%d;ack_buffer:", (int)ack_len);
    191              for(i = 0; i < ack_len; i++)                     
    192              {
    193                  printf("%d ", (int)ack_buffer[i]);
    194              }
    195              printf("\r\n");
    196          
    197              return 0;  
    198          }
    199          
    200          void Get_TheTime(void)
    201          {
    202            RTC_TimeTypeDef GETRTC_Time;
    203            RTC_DateTypeDef GETRTC_Data;
    204            //unsigned char sec_st,sec_su , min_mt,min_mu ,hour_ht , hour_hu , midd ,status;
    205            if(RTC_GetFlagStatus(RTC_FLAG_RSF) == SET)  //有时间更新 
    206            {
    207              
    208              
    209              RTC_GetDate(RTC_Format_BIN , &GETRTC_Data);
    210              RTC_GetTime(RTC_Format_BIN , &GETRTC_Time);  
    211                
    212               RTC_ClearFlag(RTC_FLAG_RSF);   //清除标志
    213               printf("20%d/%d/%d Day%d %d:%d:%d\r\n" , GETRTC_Data.RTC_Year , GETRTC_Data.RTC_Month  , GETRTC_Data.RTC_Date  ,  GETRTC_Data.RTC_WeekDay ,GETRTC_Time.RTC_Hours , GETRTC_Time.RTC_Minutes , GETRTC_Time.RTC_Seconds);
    214            }
    215          }
    216          
    217          void RTC_AWU_Initial(uint16_t time)    // time * 26.95 ms 
    218          { 
    219              RTC_DeInit(); //初始化默认状态 
    220              
    221              CLK_PeripheralClockConfig(CLK_Peripheral_RTC, ENABLE);      // 允许RTC时钟 
    222              CLK_RTCClockConfig(CLK_RTCCLKSource_LSI, CLK_RTCCLKDiv_64); // 选择RTC时钟源LSI/64=593.75Hz 
    223              RTC_WakeUpClockConfig(RTC_WakeUpClock_RTCCLK_Div16);        // 593.75Hz/16=37.109375Hz t = 26.95ms 
    224              RTC_ITConfig(RTC_IT_WUT, ENABLE);  // 开启中断 
    225              RTC_SetWakeUpCounter(time);        // 设置RTC Weakup计算器初值 
    226              RTC_WakeUpCmd(ENABLE);             // 使能自动唤醒 
    227          } 
    228          
    229          // 返回距离   0~255  cm
    230          // 0:测量出错
    231          u8 Measured_Range(void)
    232          {
    233              u8 distance_cm, error_timer = 0;
    234              
    235          Detectde:	
    236              distance_cm = 0;
    237              Distance[0] = 0;    // 清零，重新测距
    238              Distance[1] = 0;    
    239              Dis_Index = 0;
    240              CSB_Wakeup();
    241              DelayMs(1);       // 至少50us 唤醒
    242              
    243              DelayMs(4);       // 系统唤醒3ms后，发送测距触发信号0x55  
    244              
    245              //U1_Set(1);        // 开启U1接收中断，准备接收测量结果
    246              while(!USART_GetFlagStatus(USART1, USART_FLAG_TXE));//等待发送完毕
    247              USART_SendData8(USART1, 0x55); 
    248              
    249              DelayMs(25);      // 等待串口返回测量结果   25
    250              CSB_Sleep(); 
    251              //U1_Set(0);        // 关闭串口1
    252              
    253              if(Dis_Index == Dis_Len) // ok
    254              {
    255                  distance_cm = ( (( (u16)Distance[0] << 8 ) + Distance[1]) / 10 ) & 0xff;    // 限定distance_cm在[0, 255]范围内
    256                  return distance_cm;
    257              }
    258              else
    259              {
    260                  if(++error_timer == 10) return 0;     // 测距出错，返回0
    261                  goto Detectde;
    262              }
    263          }
    264          
    265          //    // CSB测试
    266          //    while(1)
    267          //    {
    268          //        distance = Measured_Range();    // 测距 
    269          //        if(distance)  
    270          //        {
    271          //            LED_ON();
    272          //            printf("distance = %d cm\r\n", distance);
    273          //        }
    274          //        else 
    275          //        {
    276          //            LED_OFF();
    277          //            printf("Measured_Error\r\n");
    278          //        } 
    279          //        
    280          //        DelayMs(1000); 
    281          //    }	
    282          //    // ADC+RTC测试 
    283          //    while(1)
    284          //    {
    285          //        ADC_Value = ADC_Data_Read();                  // PA6
    286          //        ADC_Value = ADC_Value / 0x0FFF * Voltage_Refer;
    287          //        printf("ADC_Value = %.2f V\r\n", ADC_Value);  
    288          //        Get_TheTime();
    289          //        DelayMs(1000);DelayMs(1000);
    290          //    }
    291              
    292          //    // RTC-AWU测试
    293          //    while(1)
    294          //    {
    295          //        LED_TOG();                // LED闪烁，用于指示发送成功
    296          //        printf("OK!\r\n");            
    297          //        RTC_AWU_Initial(186);     // RTC 唤醒中断    186 * 26.95 ms = 5s
    298          //        halt();//挂起，最低功耗
    299          //    }
    300              
    301          //    // 通信测试
    302          //    while(1)
    303          //    {
    304          //        LED_ON();                          // LED闪烁，用于指示发送成功
    305          // send:        
    306          //        res = RF_SendPacket(SendBuffer, SEND_LENGTH);
    307          //        if(res != 0) 
    308          //        {
    309          //          printf("Send ERROR:%d\r\nRetry now...\r\n", (int)res);  // 发送失败
    310          //          DelayMs(15);
    311          //          goto send;
    312          //        }
    313          //        else  printf("Send OK!\r\n");              // 发送成功
    314          //        LED_OFF();
    315          //        DelayMs(1000);DelayMs(1000);DelayMs(1000);DelayMs(1000);DelayMs(1000);
    316          //    }

   Section sizes:

   Bytes  Function/Label
   -----  --------------
      15  ?_0
      19  ?_1
       3  ?_10
      28  ?_11
      17  ?_2
      16  ?_3
      17  ?_4
      11  ?_5
      16  ?_6
      10  ?_7
      23  ?_8
       4  ?_9
       4  AckBuffer
       2  Cnt1ms
      32  DelayMs
       1  Dis_Index
       2  Distance
      85  Get_TheTime
     150  Measured_Range
     285  RF_SendPacket
      60  RTC_AWU_Initial
       2  RecvWaitTime
       5  SendBuffer
       2  SendCnt
      36  System_Initial
      23  TIM3_1MS_ISR
       1  distance
     259  main
      36  putchar

 
 966 bytes in section .far_func.text
  10 bytes in section .near.bss
   9 bytes in section .near.data
 179 bytes in section .near.rodata
 
 966 bytes of CODE  memory
 179 bytes of CONST memory
  19 bytes of DATA  memory

Errors: none
Warnings: 2
